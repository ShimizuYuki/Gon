git config --global user.name "ShimizuYuki"
git config --global user.email "yu-ki1005@eagle.sophia.ac.jp"
git config -l　ログインしているかなどの設定確認
git config --help　コマンド確認

git init　ディレクトリをgitで使う宣言
git add <file>　ステージングエリア(インデックス)にあげる
git commit　リポジトリにあげる
git commit -m "１行メッセージ"
git commit -am "１行メッセージ"　addとcommitをいっぺんに行う
git commit --amend　直前のコミットに多少のミスがあってlogにわざわざ残さず変更したいとき

git log　履歴を見る(ID、人、日時、メッセージ)
git log --oneline　履歴を見る(１行、ID、メッセージ)
git log -p　履歴を見る(＋変更された場所)
git log --stat　履歴を見る(＋どのファイルが何カ所変わったか)

git status　今どういう状況なのか、次にやることを教えてくれる
git checkout -- <file>

git diff　変更された場所確認(まだステージングエリアにあげていない場合)
git diff --cached　変更された場所確認(まだリポジトリにあげていない場合)

git add .　現在のディレクトリ以下のファイルを全てaddする
git rm/mv <file>　gitの管理下に置かれたファイルを削除/移動

vim .gitignore 現在のディレクトリ以下にあるupしたくないファイルなどをgit管理に含めない設定　*.logでlogファイル

git reset --hard <commitID(直前のcommitIDはHAEDでok)>　現在の作業ディレクトリもステージングエリアを前のコミットの状態に戻したい
git reset HEAD　現在のステージングエリアを作業ディレクトリ状態に戻す
git reset --hard ORIG_HEAD　resetで消しちゃったコミットファイルに戻る

git branch　ブランチの一覧を表示
git branch <name>　新しいブランチを作成
git checkout <name>　任意のブランチに移動
git checkout -b <name>　ブランチを作成して移動

git merge <branch name>　任意のブランチの情報を反映
git branch -d <branch name>　ブランチを削除

git tag　一覧を表示
git tag <tag name>　直近のコミットに対してタグをつける
git tag <tag name> <commit id>　タグをつける
git tag -d <tag name>　タグを消す
git show tag name　コミットの内容を示す

git config --global alias.co checkout　コマンドを自分用に変更
git config --global alias.st status
git config --global alias.br branch
git config --global alias.ci commit
git config -l　設定を確認

git init --bare　共有リポジトリを作成
git remote add <repository name> <リポジトリの場所>　リモートリポジトリを登録
git remote rm <repository name>　削除
git remote -v　リモートリポジトリのurl
git push <name> <branch>　リポジトリに向かってブランチの内容を突っ込む
git pull <name> <branch>　ブランチに向かってリポジトリの内容を引き出す
git clone <リポジトリの場所>

rm -rf <レポジトリ名>　ローカルリポジトリを削除(ファイルが消える)